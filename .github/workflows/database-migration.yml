name: Database Migration

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Perform a dry run without actually migrating data"
        required: true
        type: boolean
        default: true

env:
  SUPABASE_DB_HOST: ${{ secrets.SUPABASE_DB_HOST }}
  SUPABASE_DB_NAME: ${{ secrets.SUPABASE_DB_NAME }}
  SUPABASE_DB_USER: ${{ secrets.SUPABASE_DB_USER }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  AZURE_DB_HOST: ${{ secrets.AZURE_DB_HOST }}
  AZURE_DB_NAME: ${{ secrets.AZURE_DB_NAME }}
  AZURE_DB_USER: ${{ secrets.AZURE_DB_USER }}
  AZURE_DB_PASSWORD: ${{ secrets.AZURE_DB_PASSWORD }}

jobs:
  migrate:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create backup directory
        run: mkdir -p ./backup

      - name: Dump Supabase database
        run: |
          # Dump only the public schema (excludes Supabase-specific schemas and roles)
          PGPASSWORD=$SUPABASE_DB_PASSWORD pg_dump \
            -h $SUPABASE_DB_HOST \
            -U $SUPABASE_DB_USER \
            -d $SUPABASE_DB_NAME \
            -F c \
            --schema-only \
            --schema=public \
            -v \
            -f ./backup/supabase_schema_$(date +%Y%m%d_%H%M%S).dump

          # Dump only the data for the selected tables (including all referenced tables)
          PGPASSWORD=$SUPABASE_DB_PASSWORD pg_dump \
            -h $SUPABASE_DB_HOST \
            -U $SUPABASE_DB_USER \
            -d $SUPABASE_DB_NAME \
            -F c \
            --data-only \
            --table=public.organizations \
            --table=public.users
            -v \
            -f ./backup/supabase_data_$(date +%Y%m%d_%H%M%S).dump

      - name: Verify dump files
        run: |
          if [ ! -s ./backup/supabase_schema_*.dump ]; then
            echo "Error: Schema dump file is empty or does not exist"
            exit 1
          fi
          if [ ! -s ./backup/supabase_data_*.dump ]; then
            echo "Error: Data dump file is empty or does not exist"
            exit 1
          fi
          echo "Schema dump file size: $(du -h ./backup/supabase_schema_*.dump | cut -f1)"
          echo "Data dump file size: $(du -h ./backup/supabase_data_*.dump | cut -f1)"

      - name: Restore to Azure (if not dry run)
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          # Drop all tables in public schema
          PGPASSWORD=$AZURE_DB_PASSWORD psql \
            -h $AZURE_DB_HOST \
            -U $AZURE_DB_USER \
            -d $AZURE_DB_NAME \
            -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;" || exit 1

          # Restore schema first (includes types, sequences, etc.)
          PGPASSWORD=$AZURE_DB_PASSWORD pg_restore \
            -h $AZURE_DB_HOST \
            -U $AZURE_DB_USER \
            -d $AZURE_DB_NAME \
            --clean \
            --if-exists \
            --no-owner \
            --no-acl \
            -v \
            ./backup/supabase_schema_*.dump || exit 1

          # Temporarily disable foreign key checks and restore data
          PGPASSWORD=$AZURE_DB_PASSWORD psql \
            -h $AZURE_DB_HOST \
            -U $AZURE_DB_USER \
            -d $AZURE_DB_NAME \
            -c "SET session_replication_role = replica;" || exit 1

          PGPASSWORD=$AZURE_DB_PASSWORD pg_restore \
            -h $AZURE_DB_HOST \
            -U $AZURE_DB_USER \
            -d $AZURE_DB_NAME \
            --no-owner \
            --no-acl \
            -v \
            ./backup/supabase_data_*.dump || exit 1

          # Re-enable foreign key checks
          PGPASSWORD=$AZURE_DB_PASSWORD psql \
            -h $AZURE_DB_HOST \
            -U $AZURE_DB_USER \
            -d $AZURE_DB_NAME \
            -c "SET session_replication_role = DEFAULT;" || exit 1

      - name: Verify Azure database (if not dry run)
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          PGPASSWORD=$AZURE_DB_PASSWORD psql \
            -h $AZURE_DB_HOST \
            -U $AZURE_DB_USER \
            -d $AZURE_DB_NAME \
            -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" || exit 1

      - name: Cleanup
        if: always()
        run: rm -rf ./backup
